package models
import (
    "encoding/json"
    "strconv"
    "strings"
)

var (
    OpeneventnormalizedmessageMarshalled = false
)

// This struct is here to use the useless readonly properties so that their required imports don't throw an unused error (time, etc.)
type OpeneventnormalizedmessageDud struct { 
    


    


    


    

}

// Openeventnormalizedmessage - Open Messaging rich media message structure
type Openeventnormalizedmessage struct { 
    // Id - Unique ID of the message generated by Messaging Platform.
    Id string `json:"id"`


    // Channel - Channel-specific information that describes the message and the message channel/provider.
    Channel Openmessagingchannel `json:"channel"`


    // VarType - Message type.
    VarType string `json:"type"`


    // Events - List of event elements.
    Events []Openmessageevent `json:"events"`

}

// String returns a JSON representation of the model
func (o *Openeventnormalizedmessage) String() string {
    
    
    
     o.Events = []Openmessageevent{{}} 

    j, _ := json.Marshal(o)
    str, _ := strconv.Unquote(strings.Replace(strconv.Quote(string(j)), `\\u`, `\u`, -1))

    return str
}

func (u *Openeventnormalizedmessage) MarshalJSON() ([]byte, error) {
    type Alias Openeventnormalizedmessage

    if OpeneventnormalizedmessageMarshalled {
        return []byte("{}"), nil
    }
    OpeneventnormalizedmessageMarshalled = true

    return json.Marshal(&struct {
        
        Id string `json:"id"`
        
        Channel Openmessagingchannel `json:"channel"`
        
        VarType string `json:"type"`
        
        Events []Openmessageevent `json:"events"`
        *Alias
    }{

        


        


        


        
        Events: []Openmessageevent{{}},
        

        Alias: (*Alias)(u),
    })
}

