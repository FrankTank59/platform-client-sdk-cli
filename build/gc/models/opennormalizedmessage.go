package models
import (
    "encoding/json"
    "strconv"
    "strings"
)

var (
    OpennormalizedmessageMarshalled = false
)

// This struct is here to use the useless readonly properties so that their required imports don't throw an unused error (time, etc.)
type OpennormalizedmessageDud struct { 
    


    


    


    


    


    


    


    


    


    

}

// Opennormalizedmessage - Open Messaging rich media message structure
type Opennormalizedmessage struct { 
    // Id - Unique ID of the message. This ID is generated by Messaging Platform. Message receipts will have the same ID as the message they reference, as such should only be set when sending a message receipt.
    Id string `json:"id"`


    // Channel - Channel-specific information that describes the message and the message channel/provider.
    Channel Openmessagingchannel `json:"channel"`


    // VarType - Message type.
    VarType string `json:"type"`


    // Text - Message text.
    Text string `json:"text"`


    // Content - List of content elements.
    Content []Openmessagecontent `json:"content"`


    // Status - Message receipt status, only used with type Receipt.
    Status string `json:"status"`


    // Reasons - List of reasons for a message receipt that indicates the message has failed. Only used with Failed status.
    Reasons []Reason `json:"reasons"`


    // IsFinalReceipt - Indicates if this is the last message receipt for this message, or if another message receipt can be expected.
    IsFinalReceipt bool `json:"isFinalReceipt"`


    // Direction - The direction of the message.
    Direction string `json:"direction"`


    // Metadata - Additional metadata about this message.
    Metadata map[string]string `json:"metadata"`

}

// String returns a JSON representation of the model
func (o *Opennormalizedmessage) String() string {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     o.Content = []Openmessagecontent{{}} 
    
    
    
    
    
    
    
     o.Reasons = []Reason{{}} 
    
    
    
    
    
    
    
    
    
    
    
     o.Metadata = map[string]string{"": ""} 
    
    

    j, _ := json.Marshal(o)
    str, _ := strconv.Unquote(strings.Replace(strconv.Quote(string(j)), `\\u`, `\u`, -1))

    return str
}

func (u *Opennormalizedmessage) MarshalJSON() ([]byte, error) {
    type Alias Opennormalizedmessage

    if OpennormalizedmessageMarshalled {
        return []byte("{}"), nil
    }
    OpennormalizedmessageMarshalled = true

    return json.Marshal(&struct { 
        Id string `json:"id"`
        
        Channel Openmessagingchannel `json:"channel"`
        
        VarType string `json:"type"`
        
        Text string `json:"text"`
        
        Content []Openmessagecontent `json:"content"`
        
        Status string `json:"status"`
        
        Reasons []Reason `json:"reasons"`
        
        IsFinalReceipt bool `json:"isFinalReceipt"`
        
        Direction string `json:"direction"`
        
        Metadata map[string]string `json:"metadata"`
        
        *Alias
    }{
        

        

        

        

        

        

        

        

        

        
        Content: []Openmessagecontent{{}},
        

        

        

        

        
        Reasons: []Reason{{}},
        

        

        

        

        

        

        
        Metadata: map[string]string{"": ""},
        

        
        Alias: (*Alias)(u),
    })
}

