package models
import (
    "encoding/json"
    "strconv"
    "strings"
)

var (
    OpenreceiptnormalizedmessageMarshalled = false
)

// This struct is here to use the useless readonly properties so that their required imports don't throw an unused error (time, etc.)
type OpenreceiptnormalizedmessageDud struct { 
    


    


    


    


    


    


    

}

// Openreceiptnormalizedmessage - Open Messaging rich media message structure
type Openreceiptnormalizedmessage struct { 
    // Id - The original unique message Id generated by the messaging platform, that this receipt message is referencing.
    Id string `json:"id"`


    // Channel - Channel-specific information that describes the message and the message channel/provider.
    Channel Openmessagingchannel `json:"channel"`


    // VarType - Message type.
    VarType string `json:"type"`


    // Status - Message receipt status.
    Status string `json:"status"`


    // Reasons - List of reasons for a message receipt that indicates the message has failed. Only used with Failed status.
    Reasons []Conversationreason `json:"reasons"`


    // IsFinalReceipt - Indicates if this is the last message receipt for this message, or if another message receipt can be expected.
    IsFinalReceipt bool `json:"isFinalReceipt"`


    // Direction - The direction of the message.
    Direction string `json:"direction"`

}

// String returns a JSON representation of the model
func (o *Openreceiptnormalizedmessage) String() string {
    
    
    
    
     o.Reasons = []Conversationreason{{}} 
    
    

    j, _ := json.Marshal(o)
    str, _ := strconv.Unquote(strings.Replace(strconv.Quote(string(j)), `\\u`, `\u`, -1))

    return str
}

func (u *Openreceiptnormalizedmessage) MarshalJSON() ([]byte, error) {
    type Alias Openreceiptnormalizedmessage

    if OpenreceiptnormalizedmessageMarshalled {
        return []byte("{}"), nil
    }
    OpenreceiptnormalizedmessageMarshalled = true

    return json.Marshal(&struct {
        
        Id string `json:"id"`
        
        Channel Openmessagingchannel `json:"channel"`
        
        VarType string `json:"type"`
        
        Status string `json:"status"`
        
        Reasons []Conversationreason `json:"reasons"`
        
        IsFinalReceipt bool `json:"isFinalReceipt"`
        
        Direction string `json:"direction"`
        *Alias
    }{

        


        


        


        


        
        Reasons: []Conversationreason{{}},
        


        


        

        Alias: (*Alias)(u),
    })
}

